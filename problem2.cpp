// Nick Kasten
// Project Euler - Problem #2
// Even Fibonacci numbers
// 5-25-2015

/*-- problem2.cpp ----------------------------------------------------------------

	Each new term in the Fibonacci sequence is generated by adding the previous 
	two terms. By starting with 1 and 2, the first 10 terms will be:
	
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	
	By considering the terms in the Fibonacci sequence whose values do not exceed 
	four million, find the sum of the even-valued terms.

--------------------------------------------------------------------------------*/

#include <iostream>
using namespace std;

// Function Prototypes
void sumEvenFibNums( int &term1, int &term2, int &total );

// Main Function
int main()
{
	int total = 0,
		term1 = 1,
		term2 = 2;
	
	sumEvenFibNums( term1, term2, total );
	
	cout << total;	// display sum of even fib nums (up to 4 million)				
	
	return 0;
}

// Function Definitions
void sumEvenFibNums( int &term1, int &term2, int &total )
{
	if ( term2 >= 4000000 )						// stop when fib nums exceed 4 million
	{
		return;
	}
	else
	{	
		if ( term1 % 2 == 0 )					// if term1 is even, add it to total
			total += term1;
		
		if ( term2 % 2 == 0 )					// if term2 is even, add it to total
			total += term2;
		
		term1 += term2;							// find next fib num in sequence
		term2 += term1;							// find second-next fib num in sequence
		
		sumEvenFibNums( term1, term2, total );	// progress through sequence with updated total
	}
}
